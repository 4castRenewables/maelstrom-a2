name:    ap2-all
outpath: ap2_eval
comment: MAELSTROM AP2 benchmark jube script for evaluation

parameterset:
  - name: appParameter
    parameter:
      - name: iteration
        tag: benchs
        type: int
        _: 1,2,3
      - name: iteration
        tag: "!benchs"
        type: int
        _: 1
      - name: conda_env
        tag: e4amd
        type: string
        _: a2-amd
      - name: conda_env
        tag: "!e4amd"
        type: string
        _: a2-benchmarking
      - name: key_rain
        type: string
        _: "tp_h"
      - name: test_size
        type: float
        _: 0.1
      - name: model_path
        tag: "jwb|jwc"
        _: /p/project/deepacf/maelstrom/ehlert1/a2/jobs/ap2_run/000101/000001_submit/work/output_model/ap2-all_101/checkpoint-1492
      - name: model_path
        tag: e4
        _: /data/maelstrom/kehlert/a2/jobs/ap2_run/000051/000001_submit/work/output_model/ap2-all_51/checkpoint-5965
      - name: indir
        type: string
        tag: "jwb|jwc"
        _: "/p/scratch/deepacf/maelstrom/maelstrom_data/ap2/data/tweets/"
      - name: indir
        type: string
        tag: e4
        _: "/data/maelstrom/kehlert/data/tweets/"
      - name: data_filename
        tag: medium
        _: "2020_text_precipitation.nc"
      - name: data_filename
        tag: large
        _: "2017_2020_tweets_rain_sun_vocab_emojis_locations_bba_Tp_era5_no_bots_normalized_filtered_weather_stations_fix_predicted_simpledeberta_radar.nc"
      - name: data_filename
        tag: "!medium+!large"
        type: string
        _: "tweets_2017_01_era5_normed_filtered_predicted_simpledeberta.nc"
      - name: slurm_output
        type: string
        _: "$jube_wp_abspath/slurm-out.%j"
      - name: slurm_error
        type: string
        _: "$jube_wp_abspath/slurm-err.%j"
      - name: outdir
        type: string
        _: "$jube_wp_abspath/output_model"
      - name: run_name
        _: "${jube_benchmark_name}_${jube_benchmark_id}"
      - name: run_folder
        type: string
        _: $run_name
  - name: globalParameter
    parameter:
      - name: modules
        tag: "jwb|jwc"
        separator: |
        _:
          module purge &&
          module load Stages/2023 &&
          module load cuDNN/8.6.0.163-CUDA-11.7 &&
          module unload Python/3.10.4
      - name: modules
        tag: "e4+!e4amd"
        separator: |
        _:
          module load slurm &&
          module load nvidia/cuda-11.7
      - name: modules
        tag: e4amd
        separator: |
        _:
          module load slurm &&
          module load amd/rocm-5.2.1
      - name: systemname
        tag: jwc
        _: jwc
      - name: systemname
        tag: jwb
        _: jwb
  - name: executeset
    init_with: platform.xml
  - name: systemParameter
    init_with: platform.xml
    parameter:
      - name: preprocess
        mode: text
        tag: "jwb|jwc"
        separator: |
        _:
          ${modules};
      - name: preprocess
        tag: e4
        mode: text
        separator: |
        _: |
          label=$$(/opt/share/scripts/powerdiscovery/getlabel.sh)
          echo "POWERMEASUREMENT: Label = $$label"
          /opt/share/scripts/powerdiscovery/getpower_bg.sh 1000 &
      - name: postprocess
        tag: "jwb|jwc"
        _: ""
      - name: postprocess
        tag: e4
        mode: text
        separator: |
        _: |
          kill -9 $$(cat ~/powerout.$$label.pid)
          awk '{print "POWERMEASUREMENT: " $0}' ~/powerout.$$label.csv
      - name: threadspertask
        _: 1
      - name: nodes
        _: 1
      - name: ready_file
        _: ready
      - name: ngpus
        tag: e4
        _: 1
      - name: ngpus
        tag: "jwc|jwb"
        _: 4
      - name: taskspernode
        _: $ngpus
      - name: timelimit
        tag: test
        _: "01:00:00"
      - name: timelimit
        tag: "!test"
        _: "24:00:00"
      - name: account
        tag: jwb|jwc
        _: deepacf
      - name: account
        tag: e4
        _: maelstrom
      - name: queue
        tag: jwb+!test
        _: booster
      - name: queue
        tag: jwb+test
        _: develbooster
      - name: queue
        tag: "e4+!e4amd"
        _: i-gpu-a100
      - name: queue
        tag: e4amd
        _: a-gpu-mi100
      - name: queue
        tag: jwc+!test
        _: gpus
      - name: queue
        tag: jwc+test
        _: develgpus
      - name: mail_type
        _: BEGIN
      - name: gres
        _: gpu:$n_gpu
      - name: executable
        _: python -u $jube_benchmark_home/../scripts/evaluate_deberta.py
      - name: submit_cmd
        _: sbatch
      - name: job_file
        tag: jwc|jwb
        _: $jube_benchmark_home/job.run
      - name: job_file
        tag: e4
        _: $jube_benchmark_home/job.run.e4
      - name: visible_devices
        type: string
        separator: ";"
        tag: jwc | jwb
        _: "CUDA_VISIBLE_DEVICES=0,1,2,3"
      - name: visible_devices
        tag: e4
        _: ""
      - name: args_exec
        mode: text
        _: >
          --log_gpu_memory
          --run_name ${run_name}
          --data_filename ${data_filename}
          --data_dir ${indir}
          -jid $${SLURM_JOBID}
          --key_rain ${key_rain}
          --model_path ${model_path}
          --output_dir ${outdir}
          --iteration ${iteration}
          --ignore_tracking
          --test_size ${test_size}

patternset:
   - name: perf_patterns
     pattern:
      - {name: jobid, type: int, _: "Running evaluation as args.job_id=$jube_pat_int" }
      - {name: ntweets, type: int, _: "loaded $jube_pat_int tweets"}
      - {name: epoch, type: int, _: "Epoch\\s+$jube_pat_int"}
      - {name: run_time, type: float, _: "RUN\\s+: took ${jube_pat_fp}"}
      - {name: training_time, type: float, _: "TRAINING\\s+: took ${jube_pat_fp}"}
      - {name: epoch_time, type: float, _: "EPOCH\\s+: took ${jube_pat_fp}"}
      - {name: io_time, type: float, _: "IO\\s+: took ${jube_pat_fp}"}
      - {name: forward_time, type: float, _: "FORWARD\\s+: took ${jube_pat_fp}"}
      - {name: backward_time, type: float, _: "BACKWARD\\s+: took ${jube_pat_fp}"}
      - {name: batch_time, type: float, _: "BATCH\\s+: took ${jube_pat_fp}"}
      - {name: evaluation_time, type: float, _: "EVALUATION: took ${jube_pat_fp}"}
      - {name: saving_model_time, type: float, _: "SAVING_MODEL[\\s+]?: took ${jube_pat_fp}"}
      - {name: loss, type: float, _: "{'loss': $jube_pat_fp"}
      - {name: eval_loss, type: float, _: "{'eval_loss': $jube_pat_fp"}
      - {name: max_memory, type: float, _: "Max memory consumption \\[Gbyte\\]: $jube_pat_fp"}
      - {name: nsteps, type: int, _: ", 'step': $jube_pat_int"}
      - {name: ndevices, type: string, _: "CUDA_VISIBLE_DEVICES=${jube_pat_wrd}$"}
      - {name: gpu_max_mem_allocated, type: float, _: "Gpu max memory allocated: ${jube_pat_fp}"}
      - {name: gpu_max_mem_reserved, type: float, _: "Gpu max memory reserved: ${jube_pat_fp}"}
      - {name: label_pat, type: string, _: "POWERMEASUREMENT: Label = $jube_pat_wrd"}
      - {name: time_pat, type: int, _: "POWERMEASUREMENT: $jube_pat_int,$jube_pat_nint,$jube_pat_nint"}
      - {name: watt_pat, type: int, _: "POWERMEASUREMENT: $jube_pat_nint,$jube_pat_int,$jube_pat_nint"}
      - {name: va_pat, type: int, _: "POWERMEASUREMENT: $jube_pat_nint,$jube_pat_nint,$jube_pat_int"}

analyser:
    name: analyse
    reduce: false
    use: perf_patterns
    analyse:
      step: submit
      file:
        - slurm-*.out
        - slurm-out.*
        - slurm-err.*
        - slurm.out
        - slurm.err
        - stdout

result:
    use: analyse
    table:
      name: result
      style: pretty
      sort: iter_pat
      column:
        - {title: "JobID", _: jobid}
        - {title: "#tweets", _: ntweets}
        - {title: "#steps", _: nsteps_last}
        - {title: "devices", _: ndevices}
        - {title: "queue", _: queue}
        - {title: "#nodes", _: nodes}
        - {title: "#gpu", _: n_gpu}
        - {title: "BS", _: batch_size}
        - {title: "T. run", format: ".4f", _: run_time_last}
        - {title: "T. IO", format: ".4f", _: io_time_sum}
        - {title: "Ev. time", format: ".4f", _: evaluation_time_max}
        - {title: "First epoch", format: ".4f", _: epoch_time_first}
        - {title: "Min epoch", format: ".4f", _: epoch_time_min}
        - {title: "Max epoch", format: ".4f", _: epoch_time_max}
        - {title: "M. eval loss", format: ".4f", _: eval_loss_min}
        - {title: "Saving time", format: ".4f", _: saving_model_time_last}
        - {title: "l. rate", _: lr}
        - {title: "min loss", format: ".4f", _: loss_min}
        - {title: "Mem", format: ".4f",  _: max_memory}
        - {title: "MaxMemAlloc", format: ".4f", _: gpu_max_mem_allocated_max}
        - {title: "MaxMemReserv", format: ".4f", _: gpu_max_mem_reserved_max}
        - {title: "Job_Time", _: timelimit}
        - {title: "Node(s)", _: label_pat}
        - {title: "Tstart", _: time_pat_first}
        - {title: "Tend", _: time_pat_last}
        - {title: "Ma.W", format: ".2f", _: watt_pat_max}
        - {title: "A.W", format: ".2f", _: watt_pat_avg}
        - {title: "Mi.W", format: ".4f", _: watt_pat_min}
        - {title: "Ma.VA", format: ".2f", _: va_pat_max}
        - {title: "A.VA", format: ".2f", _: va_pat_avg}
        - {title: "Mi.VA", format: ".4f", _: va_pat_min}

#Load jobfile
fileset:
  name: files
  copy: ${job_file}.in

substituteset:
  name: sub_job
  iofile: {in: "${job_file}.in", out: $job_file} #attributes with {} must be quoted
  sub:
    - {source: "#NODES#", dest: $nodes}
    - {source: "#PROCS_PER_NODE#", dest: $taskspernode}
    - {source: "#WALLTIME#", dest: $timelimit}
    - {source: "#MAIL_TYPE#", dest: $mail_type}
    - {source: "#ACCOUNT#", dest: $account}
    - {source: "#PARTITION#", dest: $queue}
    - {source: "#NGPUS#", dest: $ngpus}
    - {source: "#SLURMOUTPUT#", dest: $slurm_output}
    - {source: "#SLURMERROR#", dest: $slurm_error}
    - {source: "#MODULES#", dest: "${modules}"}
    - {source: "#EXEC#", dest: "${visible_devices} ${executable} ${args_exec}"}
    - {source: "#EXECCONDA#", dest: "conda activate ${conda_env}"}
    - {source: "#PREPROCESS#", dest: "${preprocess}"}
    - {source: "#POSTPROCESS#", dest: "${postprocess}"}
    - {source: "#READY#", _: $ready_file }

step:
  - name:   setup_venv
    use:
      - globalParameter
      - systemParameter
    do:
      _:
        $modules;
  - name:   submit
    use:
      - appParameter
      - globalParameter
      - systemParameter
      - executeset
      - sub_job
      - from: platform.xml
        _: jobfiles
      - from: platform.xml
        _: executesub
    do:
      done_file: $ready_file
      error_file: $error_file
      _:
        $modules;
        source ~/.bashrc;
        source $jube_benchmark_home/env.sh;
        conda activate $conda_env;
        $submit_cmd $job_file;

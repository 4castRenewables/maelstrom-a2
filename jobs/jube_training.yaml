name:    ap2-all
outpath: ap2_run
comment: MAELSTROM AP2 benchmark jube script

parameterset:
  - name: appParameter
    parameter:
      - name: nepochs
        type: int
        _: 1
      - name: lr
        type: float
        _: 3e-05
      - name: run_folder
        type: string
        _: "my_jube_test_run"
      - name: indir
        type: string
        tag: jwb|jwc
        _: "/p/scratch/deepacf/maelstrom/maelstrom_data/ap2/data/tweets/"
      - name: data_filename
        type: string
        _: "tweets_2017_01_era5_normed_filtered_predicted_simpledeberta.nc"
      - name: outdir
        type: string
        _: "$jube_wp_abspath/output_model"
  - name: globalParameter
    parameter:
      - name: modules
        tag: "jwc"
        seperator: |
        _:
          module load Stages/2022 &&
          module load cuDNN/8.3.1.22-CUDA-11.5
      - name: modules
        tag: "jwb"
        separator: |
        _:
          module load Stages/2023 &&
          module load cuDNN/8.6.0.163-CUDA-11.7
      - name: systemname
        tag: jwc
        _: jwc
      - name: systemname
        tag: jwb
        _: jwb
  - name: executeset
    init_with: platform.xml
  - name: systemParameter
    init_with: platform.xml
    parameter:
      - name: preprocess
        mode: text
        separator: |
        _:
          $modules;
      - name: threadspertask
        _: 1
      - name: nodes
        _: 1
      - name: ready_file
        _: ready
      - name: err_file
        _: gpu-err.%j
      - name: out_file
        _: gpu-out.%j
      - name: n_gpu
        _: 1
      - name: taskspernode
        _: $n_gpu
      - name: timelimit
        _: "02:00:00"
      - name: account
        _: deepacf
      - name: queue
        tag: jwb+!test
        _: booster
      - name: queue
        tag: jwb+test
        _: develbooster
      - name: mail_type
        _: BEGIN
      - name: queue
        tag: jwc+!test
        _: gpus
      - name: queue
        tag: jwc+test
        _: develgpus
      - name: gres
        _: gpu:$n_gpu
      - name: executable
        _: python -u $jube_benchmark_home/../scripts/finetune_bert.py
      - name: submit_cmd
        _: sbatch
      - name: job_file
        _: $jube_benchmark_home/job.run
      - name: args_exec
        mode: text
        _: >
          --run_folder ${run_folder}
          --data_filename ${data_filename}
          -lr ${lr}
          -nepochs ${nepochs}
          --data_dir ${indir}
          -jid $${SLURM_JOBID}

patternset:
   - name: perf_patterns
     pattern:
      - {name: iter_pat, type: int, _: "iteration\\s+$jube_pat_int/\\s*$jube_pat_nint"}
      # every 10th iteration is logged
      - {name: iterations, type: int, mode: python, _: "$iter_pat_max"}
      - {name: tflops_pat, type: float, _: "TFLOPs:\\s+$jube_pat_fp"}
      - {name: elp_pat, type: float, _: "elapsed time per iteration \\(s\\):\\s+$jube_pat_fp"}
      - {name: tokens_per_second, type: float, mode: python, _: "(1.0/$elp_pat_avg)*$global_batch_size*$sequence_length"}
      - {name: jobid, type: int, _: "Submitted batch job $jube_pat_int" }

analyser:
    name: analyse
    reduce: false
    use: perf_patterns
    analyse:
        step: benchmark
        file: job.out

result:
    use: analyse
    table:
      name: result
      style: pretty
      sort: iter_pat
      column:
        - {title: "JobID", _: jobid}
        - {title: "Job_Time", _: walltime}
        - {title: "Model_Size [Billion Param]", _: nlp_model_size}
        - {title: "Nodes", _: nodes}
        - {title: "Batch_Size", _: global_batch_size}
        - {title: "Pipline_Parallel", _: pp_size}
        - {title: "Tensor_Parallel", _: tp_size}
        - {title: "Iterations", _: iterations}
        # - {title: "TFLOPs logged", _: tflops_pat_cnt}
        - {title: "Max_TFLOPs/GPU", _: tflops_pat_max}
        - {title: "Tokens/sec",format: ".2f", _: tokens_per_second}

#Load jobfile
fileset:
  name: files
  copy: ${job_file}.in

substituteset:
  name: sub_job
  iofile: {in: "${job_file}.in", out: $job_file} #attributes with {} must be quoted
  sub:
    - {source: "#NODES#", dest: $nodes}
    - {source: "#PROCS_PER_NODE#", dest: $taskspernode}
    - {source: "#WALLTIME#", dest: $timelimit}
    - {source: "#ERROR_FILEPTHA#", dest: $err_file}
    - {source: "#OUT_FILEPATH#", dest: $out_file}
    - {source: "#MAIL_TYPE#", dest: $mail_type}
    - {source: "#ACCOUNT#", dest: $account}
    - {source: "#PARTITION#", dest: $queue}
    - {source: "#EXEC#", dest: "${executable} ${args_exec}"}
    - {source: "#READY#", _: $ready_file } # _ can be used here as well instead of dest (should be used

step:
  - name:   setup_venv
    use:
      - globalParameter
      - systemParameter
    do:
      _:
        $modules;
  - name:   submit
    use:
      - appParameter
      - globalParameter
      - systemParameter
      - executeset
      - sub_job
      - from: platform.xml
        _: jobfiles
      - from: platform.xml
        _: executesub
    do:
      done_file: $ready_file
      error_file: $error_file
      _:
        $modules;
        source ~/.bashrc;
        source $jube_benchmark_home/env.sh;
        conda activate a2-benchmarking;
        $submit_cmd $job_file;
